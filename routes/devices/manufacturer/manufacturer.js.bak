const express = require('express');
const router = express.Router();

// Import models and utilities
const AddDevice = require('../../../model/droutrouter.get('/', auth, async (rer.post('/', auth, async (req, res) => {q, res) => {vices/addDevice');
consrourourouter.get('/:id', auth, async (req, res) => {er.put('/:id', auth, async (req, res) => {er.delete('/:id', auth, async (req, res) => { {
  generateManufacturerId,
  generateSku,
  generateBatchNumber,
  generateSerialNumber,
  generateAUID,
} = require('../../../utils/idGenerator');
const authorizeRoles = require('../../../middleware/rbacMiddleware');
const verifyApiKey = require('../../../middleware/apiKeymiddleware');
const authenticateToken = require('../../../middleware/bearermiddleware');
const SensorModel = require('../../../model/devices/deviceModels');

// Create middleware stack
const auth = [verifyApiKey, authenticateToken, authorizeRoles('ADMIN', 'SUPERVISOR')];

/**
 * @swagger
 * /api/devices/manufacturer:
 *   post:
 *     tags:
 *       - Manufacturer
 *     summary: Add a new manufactured device
 *     description: Manufacturer creates and stores a new device with batch tracking and unique IDs.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - devid
 *               - model
 *               - type
 *               - mac
 *             properties:
 *               devid:
 *                 type: string
 *                 example: "sensor001"
 *               model:
 *                 type: string
 *                 example: "ENV"
 *               type:
 *                 type: string
 *                 example: "Cellular"
 *               mac:
 *                 type: string
 *                 example: "C8:3A:35:AA:12:44"
 *               datapoints:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["temperature", "humidity", "pm2_5", "uv"]
 *     responses:
 *       201:
 *         description: Device manufactured successfully.
 *       400:
 *         description: Missing or invalid fields.
 *       500:
 *         description: Server error.
 */

router.post('/', ...middlewareStack, async (req, res) => {
  try {
    const { devid, model, type, mac, datapoints } = req.body;

    // 🔍 Step 1: Validate input
    if (!devid || !model || !type || !mac) {
      return res.status(400).json({ error: 'All fields are required' });
    }

    // 🔍 Step 2: Check if model exists
    const sensorModel = await SensorModel.findOne({ model: model.toLowerCase() });
    if (!sensorModel) {
      return res.status(404).json({ error: `Model "${model}" not found in device models` });
    }

    // 🔍 Step 3: Prevent duplicate device or MAC
    const existing = await AddDevice.findOne({
      $or: [{ devid }, { mac }]
    });
    if (existing) {
      return res.status(400).json({ error: 'Device with same devid or mac already exists' });
    }

    // ✅ Step 4: Generate ONLY after all checks pass
    const manufacturingId = generateManufacturerId();
    const sku = generateSku(model);
    const batchNumber = await generateBatchNumber(); // Ensure async completes before assignment
    const auid = generateAUID();
    const serial = generateSerialNumber();

    // ✅ Step 5: Create and save the device
    const newDevice = new AddDevice({
      devid,
      model: model.toLowerCase(),
      type,
      mac,
      manufacturingId,
      sku,
      batchNumber,
      status: 'MANUFACTURED',
      datapoints,
      auid,
      serial
    });

    await newDevice.save();

    res.status(201).json({ message: 'Device manufactured successfully', device: newDevice });

  } catch (err) {
    console.error(err);
    if (err.code === 11000) {
      let duplicateKey = 'unknown';

      if (err.keyValue && Object.keys(err.keyValue).length > 0) {
        duplicateKey = Object.keys(err.keyValue)[0];
      } else if (err.message) {
        const match = err.message.match(/index:\s*(\w+)_\d+/);
        if (match && match[1]) {
          duplicateKey = match[1];
        }
      }

      return res.status(400).json({
        error: `Duplicate value for field: ${duplicateKey}`,
      });
    }

    return res.status(500).json({ error: err.message });
  }
});



/**
 * @swagger
 * /api/devices/manufacturer:
 *   get:
 *     tags:
 *       - Manufacturer
 *     summary: List all manufactured devices
 *     responses:
 *       200:
 *         description: Array of manufactured devices.
 */
router.get('/', verifyApiKey, authenticateToken, authorizeRoles('ADMIN', 'SUPERVISOR'), async (req, res) => {
  const devices = await AddDevice.find();
  res.json(devices);
});

/**
 * @swagger
 * /api/devices/manufacturer/{id}:
 *   get:
 *     tags:
 *       - Manufacturer
 *     summary: Get a device by manufacturing ID
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: Manufacturing ID
 *     responses:
 *       200:
 *         description: Found device
 *       404:
 *         description: Device not found
 */
router.get('/:id', verifyApiKey, authenticateToken, authorizeRoles('ADMIN', 'SUPERVISOR'), async (req, res) => {
  const device = await AddDevice.findOne({ manufacturingId: req.params.id });
  if (!device) return res.status(404).json({ error: 'Device not found' });
  res.json(device);
});

/**
 * @swagger
 * /api/devices/manufacturer/{id}:
 *   put:
 *     tags:
 *       - Manufacturer
 *     summary: Update a manufactured device
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Manufacturing ID of the device
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             description: Fields allowed for manufacturer to update
 *             properties:
 *               model:
 *                 type: string
 *                 example: "ENV"
 *               type:
 *                 type: string
 *                 example: "air"
 *               mac:
 *                 type: string
 *                 example: "C8:3A:35:AA:12:44"
 *               status:
 *                 type: string
 *                 enum: [MANUFACTURED, ASSIGNED, REGISTERED]
 *                 example: "ASSIGNED"
 *               datapoints:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["temperature", "humidity", "pm2_5"]
 *     responses:
 *       200:
 *         description: Updated device successfully
 *       404:
 *         description: Device not found
 */

router.put('/:id', ...middlewareStack, async (req, res) => {
  const updated = await AddDevice.findOneAndUpdate(
    { manufacturingId: req.params.id },
    req.body,
    { new: true }
  );
  if (!updated) return res.status(404).json({ error: 'Device not found' });
  res.json({ message: 'Device updated', device: updated });
});

/**
 * @swagger
 * /api/devices/manufacturer/{id}:
 *   delete:
 *     tags:
 *       - Manufacturer
 *     summary: Delete a manufactured device
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Manufacturing ID
 *     responses:
 *       200:
 *         description: Device deleted
 *       404:
 *         description: Device not found
 */
router.delete('/:id', ...middlewareStack, async (req, res) => {
  const deleted = await AddDevice.findOneAndDelete({ manufacturingId: req.params.id });
  if (!deleted) return res.status(404).json({ error: 'Device not found' });
  res.json({ message: 'Device deleted', device: deleted });
});

module.exports = router;
